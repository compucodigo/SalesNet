@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admim")]

<h3>Paises</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/countries/create">Nuevo País</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>


<Pagination CurrentPage="currentPage" 
TotalPages="totalPages" 
SelectedPage="SelectedPageAsync" />

<GenericList MyList="Countries">
    <Loading>
        <p>Loading...</p>
    </Loading>
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>                    
                    <th>Pais</th>
                    <th style="width:220px">Estados</th>
                    <th style="width:260px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>                        
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.States?.Count
                        </td>
                        <td>
                            <a class="btn btn-info" href="/countries/details/@country.Id">Detalles</a>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))> Borrar </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;
    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCountriesAsync();
    }
    private async Task LoadCountriesAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }
        string url1 = string.Empty;
        string url2 = string.Empty;
        if (!string.IsNullOrWhiteSpace(Filter))
        {
            url1 = $"/api/countries?page={page}&filter={Filter}";
            url2 = $"/api/countries/totalPages?filter={Filter}";
        }
        else
        {
            url1 = $"/api/countries?page={page}";
            url2 = $"/api/countries/totalPages";
        }
        try
        {
            var responseHttp1 = await repository.Get<List<Country>>(url1);
            var responseHttp2 = await repository.Get<int>(url2);

            Countries = responseHttp1.Response;
            totalPages = responseHttp2.Response;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadCountriesAsync(page);
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(
            new SweetAlertOptions
                {
                    Title = "¿Está seguro?",
                    Text = "No se podrá deshacer esta acción",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, borrar",
                    CancelButtonText = "No, quedarme"
                }
        );
        var isConfirmed = string.IsNullOrEmpty(result.Value);
        if (isConfirmed)
        {
            return;
        }
        var httpResponse = await repository.Delete($"/api/countries/{id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Countries = Countries!.Where(c => c.Id != id).ToList();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;        

        await LoadCountriesAsync(page);
        await SelectedPageAsync(page);
    }
}
