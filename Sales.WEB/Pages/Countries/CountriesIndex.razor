@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Paises</h3>

<a class="btn btn-primary mb-3" href="/countries/create">Nuevo Pais</a>

<GenericList MyList="Countries">
    <Loading>
        <p>Loading...</p>
    </Loading>
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>                    
                    <th>Pais</th>
                    <th>Estados</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>                        
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.States?.Count
                        </td>
                        <td>
                            <a class="btn btn-info" href="/countries/details/@country.Id">Detalles</a>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))> Borrar </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(
            new SweetAlertOptions
                {
                    Title = "¿Está seguro?",
                    Text = "No se podrá deshacer esta acción",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, borrar",
                    CancelButtonText = "No, quedarme"
                }
        );
        var isConfirmed = string.IsNullOrEmpty(result.Value);
        if (isConfirmed)
        {
            return;
        }
        var httpResponse = await repository.Delete($"/api/countries/{id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Countries = Countries!.Where(c => c.Id != id).ToList();
    }
}
