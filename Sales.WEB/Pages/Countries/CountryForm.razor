@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="onBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Pais</label>
        <div>
            <InputText @bind-Value="Country.Name" class="form-control" />
            <ValidationMessage For="@(() => Country.Name)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Grabar Cambios</button>
    <button type="button" class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Country Country { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Country);
    }

    private async Task onBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();
        if (!formWasModified || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(            
            new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Los cambios no se han guardado",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, salir",
                CancelButtonText = "No, quedarme"
            }
        );

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}