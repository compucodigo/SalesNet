@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (country is null)
{
    <p>Loading...</p>
}
else
{
    <h3 class="card-title">@country.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/states/create/@country.Id">Nuevo Estado</a>
        <a class="btn btn-success" href="/countries">Volver a Paises</a>
    </div>

    <GenericList MyList="states">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>                        
                        <th>Estado</th>
                        <th>Ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.Cities?.Count
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@state.Id">Detalles</a>
                                <a class="btn btn-warning" href="/states/edit/@state.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(state.Id))> Borrar </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private Country? country;
    private List<State>? states;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Country>($"/api/countries/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }
            else
            {
                var errorMessage = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = errorMessage,
                    Icon = SweetAlertIcon.Error
                });
                return;
            }
        }
        country = responseHttp.Response;
        states = country!.States!.ToList();
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(
            new SweetAlertOptions
                {
                    Title = "¿Está seguro?",
                    Text = "No se podrá deshacer esta acción",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, borrar",
                    CancelButtonText = "No, quedarme"
                }
        );
        var isConfirmed = string.IsNullOrEmpty(result.Value);
        if (isConfirmed)
        {
            return;
        }
        var httpResponse = await repository.Delete($"/api/states/{id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        states = states!.Where(c => c.Id != id).ToList();
    }

}
